PRO 2
Working with Maven: Creating a Maven Project, Understanding the POM File,
 Dependency Management and Plugins

STEP 1: Open Eclipse then follow this navigation
File —-----> New --------- >Maven Project
After that Screen be as in below


STEP 2: Make sure Use default Workspace Location is selected, then click Next The
screen be as in below

STEP 3: In Screen shown above, click near the entry place of Filter and type
Apache” or select catalog as Internal 

STEP4: Enter Group Id:com.program2.maven
Artifact Id:program2-example-jar Keep snapshot as it is
Package:com.program2.maven.program2

STEP 5: Now its time to build Maven Project Go to Maven Project ---------------
>Right Click on the Project and select Maven Build
 After the above procedure is done
Select Goal as package 


PROGRAM 4
Practical Exercise: Build and Run a Java Application with Maven, Migrate the Same
Application to Gradle

STEP 1: First create a Maven Project as in PROGRAM2 then build the project and
run java application you will get Hello World Message

STEP 2: Then to migrate to gradle use shortcut Key Ctrl+Alt+Shif+T To get Terminal screen as
in below: 

STEP 3: Type command gradle init it will ask for migrate from maven to gradle type yes

STEP4 : After the above command is validated to yes it prompts to select Domain
Specific Language as in screen below select 2 (as we have done for Kotlin)

STEP 5: After selecting Groovy it asks for validating prompt for API Generator just
validate as yes 

STEP 6: Type the command gradle biuld

{ id("java-library")
id("mavenpublish") id("application")
}

application { mainClass.set("com.pgm4.test.App") // Use .set() for properties
}

repositories { mavenCentral()
// Uncomment if you need to publish locally
// mavenLocal()
}

dependencies { testImplementation("junit:junit:4.13.2") // Use Kotlin syntax
for dependencies }

group =
"com.pgm4.test" version
= "0.0.1-
SNAPSHOT"
description = "pgm4"
java.sourceCompatibility = JavaVersion.VERSION_11 // Consider upgrading

publishing
{
publicati ons {
create<MavenPublication>("maven") { from(components["java"])
} 
}
}

tasks.withType<JavaCompile>().configu reEach {
options.encoding = "UTF-8"
}
tasks.withType<Javadoc>().configureEa ch
{ options.encoding = "UTF-8"
}


AFTER DOING ALL CHANGES FINAL STEP
To run commands gradle clean build
gradle run You will get
Output as
Hello World! Welcome to pgm4 


PROGRAM5:
Introduction to Jenkins: What is Jenkins?, Installing Jenkins on Local or Cloud Environment,
Configuring Jenkins for First Use .

STEP 2: Go to first Column -> Download Jenkins 2.504.1 LTS for -> Ubuntu/Debian


 STEP 3: Copy the commands from long term support release and paste in terminal then
 execute one by one 

STEP 4: Go to Start Jenkins execute commands one by one

STEP5: Then Go to browser type localhost :8080
• Click on first link, click on 1st window then you will get path copy that path
and paste it on terminal then you get the password 

STEP 6: Paste the password to Jenkins window and click on continue
• Click on install suggested plugins

STEP 7: Next Sign-Up page will open after all plugin’s installation
• Username:
• Password:
• Confirm password:
• Full name:
• Email
• Press save and continue then URL of Jenkins
• Save and finish 


PROGRAM 8:
Set up a Jenkins CI Pipeline for a Maven Project, Use Ansible to Deploy Artifacts Generated by Jenkins

STEP 1: Create a simple Maven ‘HelloWorld’ project using either Eclipse IDE or the terminal and Run a test
build.

STEP 2: Create Jenkins Job
• Go to Jenkins dashboard → click New Item → Freestyle Project
• Enter job name: HelloWorld-Maven-Build
• Select Git as a source code Management
• Repository URL: Use a local git repo or push your Maven project to GitHub and use that link.

 STEP 3: Configuration build
• Under Build, add:
mvn clean package
• Under Post-build Actions, select:
Archive the artifact: target/helloworld-1.0-SNAPSHOT.jar
Save and Build project

STEP 4: Create an Ansible Playbook for Deployment
Create the directoty for the playbook:
mkdir -p ~ /ansible-deploy
cd ~ / ansible-deploy
nano deploy.yml
Save and exit.

STEP 5: Integrate Ansible with Jenkins
• Open Jenkins Dashboard → select HelloWorld-Maven_Build job
• Go to configure → Post-build Actions
• Click “Invoke Ansible Playbook”
• Playbook path: /home/user/ansible-deploy/deploy.yml
• Inventory file: /etv/ansible/host
