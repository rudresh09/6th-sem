Experiment 7: Configuration Management with Ansible:
Basics of Ansible:Inventory, playbooks, and Modules, Automating server Configurations with
playbooks, hands-on: Writting and Running a Basic Playbook.
Install Ansible on Ubuntu
Open a terminal and follow these steps:
step 1: Update package lists
sudo apt update
step 2: Install software-properties-common (optional but helpful)
sudo apt install software-properties-common -y
step 3: Add the Ansible PPA
sudo add-apt-repository --yes --update ppa:ansible/ansible
step 4: Fix the locale
sudo locale-gen en_US.UTF-8
sudo update-locale LANG=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
locale
step 5: Install Ansible
sudo apt install ansible -y
step 6: Verify installation
ansible â€“version
step 7: Create inventory file
 vi inventory.ini
 code:
 [local]
localhost ansible_connection=local
save and exit.
step 8: create yml playbook
vi create-file.yml
code: (note:- indentation code)
---
- name: Create a file on remote hosts
 hosts: all
 become: true
 tasks:
 - name: Create a file called /tmp/hello.txt
 file:
 path: /tmp/hello.txt
 state: touch
save and exit.
Run Command:
ansible-playbook -i inventory.ini create-file.yml

step 8: To verify the result manually
ls -l /tmp/hello.txt
(or)
cat /tmp/hello.txt
Experiment 8: Practical Excercise:
Set up a Jenkins CI Pipeline for a Maven Project, Use Ansible to deploy Artifacts generated by
Jenkins
i) Jenkins setup (pipeline for Maven build)
ii) Ansible setup for deployment
iii) Integration between Jenkins and Ansible
In
trigger section leave uncheck
the
Save the configuration.
Pipeline script: Jenkinsfile
code:
pipeline {
 agent any
 tools {
 maven 'Maven 3'
 jdk 'Java 11'
 }
 stages {
 stage('Checkout Code') {
 steps {
 git 'https://github.com/YOUR-USERNAME/YOUR-MAVEN-REPO.git'
 }
 }
 stage('Build with Maven') {
 steps {
 sh 'mvn clean package'
 }
 }
 stage('Archive JAR') {
 steps {
 archiveArtifacts artifacts: 'target/*.jar'
 }
 }
 stage('Deploy using Ansible') {
 steps {
 sh 'ansible-playbook -i ansible/inventory.ini ansible/deploy.yml'
 }
 }
 }
}
Steps to do in terminal :
1. Move to clean location:
cd ~
mkdir java-projects
cd java-projects
2.Run the Maven Archetype Command Again:
mvn archetype:generate \
 -DgroupId=com.example \
 -DartifactId=myapp \
 -DarchetypeArtifactId=maven-archetype-quickstart \
 -DinteractiveMode=false

3.Create Jenkinsfile:
touch Jenkinsfile
nano Jenkinsfile
code:
pipeline {
 agent any
 tools {
 maven 'Maven 3' // Make sure this name matches what you added in Jenkins tools
 jdk 'Java 11'
 }
 stages {
 stage('Build Maven Project') {
 steps {
 sh 'mvn clean package'
 }
 }
 stage('Archive Artifact') {
 steps {
 archiveArtifacts artifacts: 'target/*.jar'
 }
 }
 stage('Deploy with Ansible') {
 steps {
 sh 'ansible-playbook -i ansible/inventory.ini ansible/deploy.yml'
 }
 }
 }
}
4.Create Ansible Directory and files:
mkdir ansible
cd ansible
5.Create inventory.ini:
nano inventory.ini
code:
[app]
localhost ansible_connection=local
6.After running below command pom.xml should be like this:
mvn clean package
note: (pom.xml will auto cretae, just check properties is added or not. If not add properties)
code:
<project xmlns="http://maven.apache.org/POM/4.0.0"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
 http://maven.apache.org/maven-v4_0_0.xsd">
 <modelVersion>4.0.0</modelVersion>
 <groupId>com.example</groupId>
 <artifactId>myapp</artifactId>
 <packaging>jar</packaging>
 <version>1.0-SNAPSHOT</version>
 <name>myapp</name>
 <url>http://maven.apache.org</url>
 <properties>
 <maven.compiler.source>1.8</maven.compiler.source>
 <maven.compiler.target>1.8</maven.compiler.target>
 </properties>
 <dependencies>
 <dependency>
 <groupId>junit</groupId>
 <artifactId>junit</artifactId>
 <version>3.8.1</version>
 <scope>test</scope>
 </dependency>
 </dependencies>
</project>
verify:
ls target
myapp-1.0-SNAPSHOT.jar should exist
7.Create deploy.yml:
cd myapp
(note: install jdk, if not installed
sudo apt install default-jdk )
jar xf target/myapp-1.0-SNAPSHOT.jar META-INF/MANIFEST.MF
cat META-INF/MANIFEST.MF
verify Main-Class as above screenshot it should be com.example.App
cp target/myapp-1.0-SNAPSHOT.jar /home/anamika/deploy/myapp.jar
java -jar /home/anamika/deploy/myapp.jar
cd ansible
nano deploy.yml
code:
- name: Deploy Maven JAR
 hosts: app
 tasks:
 - name: Ensure target directory exists
 file:
 path: /opt/myapp
 state: directory
 mode: '0755'
 - name: Copy JAR file
 copy:
 src: ../target/myapp-1.0-SNAPSHOT.jar
 dest: /opt/myapp/myapp.jar
Save and exit
- - - - - - - - - -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
nano hosts.ini
code:
[app]
localhost ansible_connection=local
save and exit
Ansible Playbook with below command:
ansible-playbook hosts.ini deploy.yml
Run
